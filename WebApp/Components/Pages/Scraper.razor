@page "/scraper"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.SignalR.Client
@using WebApp.Clients
@using Application.Features.Github.Models
@inject NavigationManager Navigation
@inject IScraperClient Client
@implements IAsyncDisposable

<h3>Scraper</h3>

<div Class="rz-p-0 rz-p-md-8">
    <RadzenTemplateForm TItem="ScrapingRequest" Data="model" Submit="OnSubmit">
        <RadzenRow Gap="2rem" Class="rz-p-0 rz-p-lg-4">
            <RadzenColumn Size="12" SizeMD="6">
                <RadzenStack>
                    <RadzenFieldset Text="Repository Info">
                        <RadzenStack  Gap="1rem">
                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="Owner" Component="Owner" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">
                                    <RadzenTextBox Style="width: 100%;" Name="Owner" @bind-Value="model.Owner" />
                                </RadzenColumn>
                            </RadzenRow>
                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="Repository" Component="Repository" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">
                                    <RadzenTextBox Style="width: 100%;" Name="Repository" @bind-Value="model.Repository" />
                                </RadzenColumn>
                            </RadzenRow>
                        </RadzenStack>
                    </RadzenFieldset>
                    <RadzenFieldset Text="Workflow">
                        <RadzenStack  Gap="1rem">
                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="Workflow" Component="Workflow" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">
                                    <RadzenDropDown @bind-Value="model.WorkflowId" Data="workflows" TextProperty="Name" ValueProperty="Id" AllowClear="true" Placeholder="Select workflow" Style="width: auto;" Name="Workflow"></RadzenDropDown>
                                    <RadzenButton ButtonType="ButtonType.Button" Text="Load" Click="LoadWorkflows"></RadzenButton>  
                                </RadzenColumn>
                            </RadzenRow>
                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="Jobs" Component="Jobs" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">
                                    <RadzenDropDown @bind-Value="model.JobNames" Data="jobs" Name="Jobs" Multiple="true" AllowClear="true" Placeholder="Select jobs" Chips="true" Style="width: auto;" />
                                    <RadzenButton ButtonType="ButtonType.Button" Text="Load" Click="LoadJobs"></RadzenButton> 
                                </RadzenColumn>
                            </RadzenRow>
                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="Skip processed:" Component="Parameter" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">
                                   <RadzenRadioButtonList @bind-Value="model.SkippingRequest" TValue="SkippingRequest">
                                       <Items>
                                           <RadzenRadioButtonListItem Text="Jobs" Value="SkippingRequest.Job" />
                                           <RadzenRadioButtonListItem Text="Workflows" Value="SkippingRequest.Workflow" />
                                       </Items>
                                   </RadzenRadioButtonList>
                                </RadzenColumn>
                            </RadzenRow>
                        </RadzenStack>
                    </RadzenFieldset>
                    <RadzenStack Orientation="Orientation.Horizontal">
                      <RadzenButton ButtonType="ButtonType.Submit" Text="Start Request"></RadzenButton>
                      <RadzenButton ButtonType="ButtonType.Button" Text="Cancel Request" Click="Cancel"></RadzenButton>  
                    </RadzenStack>
                </RadzenStack>
            </RadzenColumn>
            <RadzenColumn Size="12" SizeMD="6">
                <RadzenStack>
                    <RadzenFieldset Text="Running Jobs">
                        <ul>
                        @foreach (var jobStatus in scrapingStatus.JobStatusList)
                        {
                            <li>@jobStatus.Name: [Job not Found: @jobStatus.AmountJobNotFound], [Parsing Errors: @jobStatus.AmountParsingError]</li>
                        }
                        </ul>
                    </RadzenFieldset>
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow>
            <RadzenColumn Size="12">
                <RadzenStack>
                    <RadzenFieldset Text="Results">
                        <RadzenStack  Gap="1rem">
                            <EventConsole @ref=@console/>
                        </RadzenStack>
                    </RadzenFieldset>
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>
    </RadzenTemplateForm>
</div>

@code {
    private EventConsole? console;
    private HubConnection? hubConnection;

    private readonly ScrapingRequest model = new()
    {
        Owner = "WordPress",
        Repository = "gutenberg",
        SkippingRequest = SkippingRequest.Job
    };
    
    private IEnumerable<string> jobs;
    private IEnumerable<WorkflowResponse> workflows;

    private ScrapingStatus scrapingStatus = new();
    
    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(new Uri("http://host.docker.internal:5000/scraperhub"))
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<string>("ReceiveLog", (message) =>
        {
            console!.Log(message);
        });

        hubConnection.On<ScrapingStatus>("StatusUpdate", (statusUpdate) =>
        {
            scrapingStatus = statusUpdate;
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }
    
    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
    
    async Task OnSubmit(ScrapingRequest request)
    {
        await Client.StartScraping(request);
    }

    async Task Cancel()
    {
        await Client.StopScraping();
    }

    private void LoadWorkflows()
    {
        workflows = Client.GetWorkflows(model.Owner, model.Repository).Result;
        InvokeAsync(StateHasChanged);
    }

    private void LoadJobs()
    {
        jobs = Client.GetJobs(model.Owner, model.Repository, model.WorkflowId).Result;
        InvokeAsync(StateHasChanged);
    }
}