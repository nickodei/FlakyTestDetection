@page "/TestVisualisations"
@using Microsoft.EntityFrameworkCore
@using Application.Infrastructure
@using Application.Features.Github.Entities
@rendermode InteractiveServer

@implements IDisposable
@inject IDbContextFactory<ApplicationDbContext> DbFactory

<h3>Over time visualisations</h3>

<RadzenChart>
    <RadzenColumnSeries Data="flakyItemSet" CategoryProperty="CreatedAt" ValueProperty="CountTests" Title="Workflow runs">
        <RadzenSeriesDataLabels  Visible="false" />
    </RadzenColumnSeries>
</RadzenChart>
 <RadzenChart>
    <RadzenStackedAreaSeries Smooth="false" Data="flakyTestsPerDays" CategoryProperty="CreatedAt" Title="Flaky" ValueProperty="CountFlaky" RenderingOrder="1">
        <RadzenSeriesDataLabels Visible="false" />
    </RadzenStackedAreaSeries>
    <RadzenStackedAreaSeries Smooth="false" Data="flakyTestsPerDays" CategoryProperty="CreatedAt" Title="Failed" ValueProperty="CountFailed">
        <RadzenSeriesDataLabels Visible="false" />
    </RadzenStackedAreaSeries>
</RadzenChart>

@code {
    private class ItemSet
    {
        public int CountTests { get; set; }
        public DateTime CreatedAt { get; set; }
    }

    private class FlakyTestsPerDay
    {
        public int CountFlaky { get; set; }
        public int CountFailed { get; set; }
        public DateTime CreatedAt { get; set; }
    }
    
    private ApplicationDbContext? dbContext;
    private IEnumerable<ItemSet> flakyItemSet = [];
    private IEnumerable<FlakyTestsPerDay> flakyTestsPerDays = [];
    
    protected override Task OnInitializedAsync()
    {
        dbContext = DbFactory.CreateDbContext();
        var query = from workflowRuns in dbContext.WorkflowRuns
            group workflowRuns by workflowRuns.CreatedAt.Date into dateGroup
            select new ItemSet()
            {
                CreatedAt = dateGroup.Key,
                CountTests = dateGroup.Count()
            };
        
        flakyItemSet = query.ToList();
        flakyTestsPerDays = LoadFlakyTestsPerDay();
        return base.OnInitializedAsync();
    }

    private IEnumerable<FlakyTestsPerDay> LoadFlakyTestsPerDay()
    {
        var query = from workflowRun in dbContext?.WorkflowRuns
            join job in dbContext?.Jobs on workflowRun.WorkflowRunId equals job.WorkflowRunId
            join testSuite in dbContext?.TestSuites on job.JobId equals testSuite.JobId
            group testSuite by workflowRun.CreatedAt.Date
            into dateGroup
            select new FlakyTestsPerDay()
            {
                CreatedAt = dateGroup.Key,
                CountFlaky = dateGroup.Sum(x => x.CountFlakyTests),
                CountFailed = dateGroup.Sum(x => x.CountFailedTests)
            };

        return query.ToList();
    }

    public void Dispose()
    {
        dbContext?.Dispose();
    }
}