@page "/test-visualisations"
@using Microsoft.EntityFrameworkCore
@using Application.Infrastructure
@using Application.Features.Tests.Entities
@rendermode InteractiveServer

@implements IDisposable
@inject IDbContextFactory<ApplicationDbContext> DbFactory

<h3>Test Visualisations</h3>

<RadzenAutoComplete Placeholder="Show for test..." Change="Callback" Data="dropdownTests" TextProperty="Name" Style="width: 100%;" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Company Name" }})" />

<RadzenChart>
    <RadzenColumnSeries Data="TestFlakyOverWeaks.Where(x => x.Status == TestStatus.Flaky)" CategoryProperty="CreatedAt" Title="Flaky" LineType="LineType.Dashed" ValueProperty="Count">
        <RadzenSeriesDataLabels Visible="false" />
    </RadzenColumnSeries>
    <RadzenColumnSeries Data="TestFlakyOverWeaks.Where(x => x.Status == TestStatus.Failed)" CategoryProperty="CreatedAt" Title="Failed" ValueProperty="Count">
        <RadzenSeriesDataLabels Visible="false" />
    </RadzenColumnSeries>
</RadzenChart>

@code {
    private class TestCountByRepository
    {
        public string Name { get; set; }
        public IEnumerable<TestCount> testCounts { get; set; }
    }
    
    private class TestCount
    {
        public string Status { get; set; }
        public int CountTests { get; set; }
    }
    
    private ApplicationDbContext? dbContext;

    private long? selected;
    private IEnumerable<DropdownTest> dropdownTests = [];
    private IEnumerable<TestFlakyOverWeak> TestFlakyOverWeaks = [];
    
    protected override Task OnInitializedAsync()
    {
        dbContext = DbFactory.CreateDbContext();
        //TestFlakyOverWeaks = LoadFlakyOverWeak();
        dropdownTests = LoadTestForDropdown();
        //testCountByRepositories = LoadRepositorySummary();
        
        return base.OnInitializedAsync();
    }

    private record TestFlakyOverWeak(DateTime CreatedAt, int Count, TestStatus Status);
    private IEnumerable<TestFlakyOverWeak> LoadFlakyOverWeak(string name)
    {
        var query = from repository in dbContext.Repositories
            join workflow in dbContext.Workflows on repository.RepositoryId equals workflow.RepositoryId
            join workflowRun in dbContext.WorkflowRuns on workflow.WorkflowId equals workflowRun.WorkflowId
            join job in dbContext.Jobs on workflowRun.WorkflowRunId equals job.WorkflowRunId
            join testSuite in dbContext.TestSuites on job.JobId equals testSuite.JobId
            join test in dbContext.Tests on testSuite.Id equals test.TestSuiteId
            where test.Name == name
            group test by new { workflowRun.CreatedAt.Date, test.Status} into dateGroup
            select new TestFlakyOverWeak(dateGroup.Key.Date, dateGroup.Count(), dateGroup.Key.Status);
        return query.ToList();
    }

    private record DropdownTest(string Name);

    private IEnumerable<DropdownTest> LoadTestForDropdown()
    {
        var query = from test in dbContext.Tests group test by test.Name into data select new DropdownTest(data.Key);
        return query.ToList();
    }
    
    
    private IEnumerable<TestCountByRepository> LoadRepositorySummary()
    {
        dbContext = DbFactory.CreateDbContext();
        var query = from repository in dbContext.Repositories
            join workflow in dbContext.Workflows on repository.RepositoryId equals workflow.RepositoryId
            join workflowRun in dbContext.WorkflowRuns on workflow.WorkflowId equals workflowRun.WorkflowId
            join job in dbContext.Jobs on workflowRun.WorkflowRunId equals job.WorkflowRunId
            join testSuite in dbContext.TestSuites on job.JobId equals testSuite.JobId
            group testSuite by repository.FullName into g
            select new TestCountByRepository()
            {
                Name = g.Key,
                testCounts = new []
                {
                    new TestCount() { Status = "Passed", CountTests = g.Sum(x => x.CountPassedTests) },
                    new TestCount() { Status = "Failed", CountTests = g.Sum(x => x.CountFailedTests) },
                    new TestCount() { Status = "Flaky", CountTests = g.Sum(x => x.CountFlakyTests) },
                    new TestCount() { Status = "Skipped", CountTests = g.Sum(x => x.CountSkippedTests) }
                }
            };

        return query.ToList();
    }

    public void Dispose()
    {
        dbContext?.Dispose();
    }

    private void Callback(dynamic args)
    {
        TestFlakyOverWeaks = LoadFlakyOverWeak(args);
    }
}