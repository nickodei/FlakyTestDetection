@page "/TestList"
@rendermode InteractiveServer

@using Microsoft.EntityFrameworkCore
@using Application.Infrastructure
@using Application.Features.Tests.Entities

@implements IDisposable
@inject IDbContextFactory<ApplicationDbContext> DbFactory

<h3>Test-Suite</h3>
<RadzenDataGrid AllowFiltering="true" AllowGrouping="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="20" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                Data="tests" TItem="Test" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or">
    <HeaderTemplate>
        <RadzenButton Text="Delete Test-Suites" Click="DeleteAllTests" />
    </HeaderTemplate>
    <Columns>
        <RadzenDataGridColumn TItem="Test" Property="TestSuiteId" Title="TestSuite Id"></RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Test" Property="Name" Title="Name"></RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Test" Property="Status" Title="Status"></RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    private ApplicationDbContext? dbContext;
    private IEnumerable<Test> tests = [];

    protected override Task OnInitializedAsync()
    {
        dbContext = DbFactory.CreateDbContext();
        tests = dbContext.Tests.Include(x => x.Attempts).ToList();

        return base.OnInitializedAsync();
    }

    private void DeleteAllTests()
    {
        dbContext?.TestAttempts.RemoveRange(dbContext.TestAttempts);
        dbContext?.Tests.RemoveRange(dbContext.Tests);
        dbContext?.SaveChanges();
        tests = [];
    }

    public void Dispose()
    {
        dbContext?.Dispose();
    }
}